//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Defender.Common.Exceptions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Defender.WalutomatHelperService.Infrastructure.Clients.Walutomat.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IWalutomatClient
    {
        /// <summary>
        /// Returns wallet balance
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <returns>Returns wallet balances (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BalanceResponse> GetBalancesAsync(string x_API_Signature, System.DateTime? x_API_Timestamp);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet balance
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <returns>Returns wallet balances (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BalanceResponse> GetBalancesAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns wallet history - operations recorded on the wallet
        /// </summary>
        /// <remarks>
        /// **OperationDetails**:
        /// <br/>The table below presents keys provided in OperationDeatils depending on OperationType of an entry in the account history
        /// <br/>
        /// <br/>|  OperationType   | OperationDetailedType           | OperationDetails                                                                                                                                    |
        /// <br/>|------------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
        /// <br/>| PAYIN            | PAYIN                           | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| PAYIN            | PAYIN_P24                       | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYIN            | PAYIN_CARD                      | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_PAYPAL                    | transferTitle                                                                                                                                       |
        /// <br/>| PAYIN            | PAYIN_P24_BLIK                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_GPAY                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_NOW                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYOUT           | PAYOUT                          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_REJECT                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_RETURN                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYOUT_POST_FACTUM              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle,                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT                     | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT_RETURN              | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_REJECT       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_RETURN       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT            | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_REJECT     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_RETURN     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount, returnReasonCode, returnReasonCode |
        /// <br/>| MARKET_FX        | MARKET_FX                       | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| DIRECT_FX        | DIRECT_FX                       | amountSold, amountBought, rate, rateTs                                                                                                              |
        /// <br/>| TRANSFER         | INTERNAL                        | title, senderAccountId, receiverAccountId, receiverDetails                                                                                          |
        /// <br/>| TRANSFER         | WT_PAY                          | title, senderAccountId, receiverAccountId, receiverDetails, partnerOrderId                                                                          |
        /// <br/>| COMMISSION       | PAYIN_FEE                       | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| COMMISSION       | PAYIN_P24_FEE                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| COMMISSION       | PAYIN_CARD_FEE                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| COMMISSION       | PAYIN_PAYPAL_FEE                | transferTitle                                                                                                                                       |
        /// <br/>| COMMISSION       | PAYOUT_FEE                      | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYOUT_REJECT_FEE               | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | CASH_PAYOUT_FEE                 | no details                                                                                                                                          |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_FEE          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_REJECT_FEE   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_FEE        | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_REJECT_FEE | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | MARKET_FX_FEE                   | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| COMMISSION       | CHARGE_COMPENSATION             | title                                                                                                                                               |
        /// <br/>| COMMISSION       | MONTHLY_FEE                     | no details                                                                                                                                          |
        /// <br/>| OTHER            | CUSTOMER_PROFIT                 | title                                                                                                                                               |
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations recorded in this date and newer are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <param name="operationType">Can be used to limit results to selected operation type like payin, payout, currency exchange or commission, if not provided all operations of any kind on multicurrency wallet are returned</param>
        /// <param name="operationDetailedType">Can be used to limit results to selected operation detailed type</param>
        /// <param name="itemLimit">Maximum number of account operations fetched in one response. If actual number of operations satisfying request criteria exceeds volume number, response is trimmed to this number and next request with appropriate continueFrom parameter shall be used to read next batch of operations.</param>
        /// <param name="continueFrom">ID of the history item the query will resume from. Usually the last historyItemId received in a prevoius batch. Item with provided id will not be included in the response (exclusive).</param>
        /// <param name="sortOrder">Sort order of returned elements.</param>
        /// <returns>Returns list of operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoryResponse> GetHistoryAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime? dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous> currencies, OperationType? operationType, OperationDetailedType? operationDetailedType, int? itemLimit, int? continueFrom, SortOrder? sortOrder);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet history - operations recorded on the wallet
        /// </summary>
        /// <remarks>
        /// **OperationDetails**:
        /// <br/>The table below presents keys provided in OperationDeatils depending on OperationType of an entry in the account history
        /// <br/>
        /// <br/>|  OperationType   | OperationDetailedType           | OperationDetails                                                                                                                                    |
        /// <br/>|------------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
        /// <br/>| PAYIN            | PAYIN                           | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| PAYIN            | PAYIN_P24                       | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYIN            | PAYIN_CARD                      | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_PAYPAL                    | transferTitle                                                                                                                                       |
        /// <br/>| PAYIN            | PAYIN_P24_BLIK                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_GPAY                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_NOW                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYOUT           | PAYOUT                          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_REJECT                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_RETURN                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYOUT_POST_FACTUM              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle,                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT                     | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT_RETURN              | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_REJECT       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_RETURN       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT            | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_REJECT     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_RETURN     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount, returnReasonCode, returnReasonCode |
        /// <br/>| MARKET_FX        | MARKET_FX                       | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| DIRECT_FX        | DIRECT_FX                       | amountSold, amountBought, rate, rateTs                                                                                                              |
        /// <br/>| TRANSFER         | INTERNAL                        | title, senderAccountId, receiverAccountId, receiverDetails                                                                                          |
        /// <br/>| TRANSFER         | WT_PAY                          | title, senderAccountId, receiverAccountId, receiverDetails, partnerOrderId                                                                          |
        /// <br/>| COMMISSION       | PAYIN_FEE                       | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| COMMISSION       | PAYIN_P24_FEE                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| COMMISSION       | PAYIN_CARD_FEE                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| COMMISSION       | PAYIN_PAYPAL_FEE                | transferTitle                                                                                                                                       |
        /// <br/>| COMMISSION       | PAYOUT_FEE                      | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYOUT_REJECT_FEE               | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | CASH_PAYOUT_FEE                 | no details                                                                                                                                          |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_FEE          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_REJECT_FEE   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_FEE        | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_REJECT_FEE | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | MARKET_FX_FEE                   | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| COMMISSION       | CHARGE_COMPENSATION             | title                                                                                                                                               |
        /// <br/>| COMMISSION       | MONTHLY_FEE                     | no details                                                                                                                                          |
        /// <br/>| OTHER            | CUSTOMER_PROFIT                 | title                                                                                                                                               |
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations recorded in this date and newer are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <param name="operationType">Can be used to limit results to selected operation type like payin, payout, currency exchange or commission, if not provided all operations of any kind on multicurrency wallet are returned</param>
        /// <param name="operationDetailedType">Can be used to limit results to selected operation detailed type</param>
        /// <param name="itemLimit">Maximum number of account operations fetched in one response. If actual number of operations satisfying request criteria exceeds volume number, response is trimmed to this number and next request with appropriate continueFrom parameter shall be used to read next batch of operations.</param>
        /// <param name="continueFrom">ID of the history item the query will resume from. Usually the last historyItemId received in a prevoius batch. Item with provided id will not be included in the response (exclusive).</param>
        /// <param name="sortOrder">Sort order of returned elements.</param>
        /// <returns>Returns list of operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoryResponse> GetHistoryAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime? dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous> currencies, OperationType? operationType, OperationDetailedType? operationDetailedType, int? itemLimit, int? continueFrom, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns wallet history (operations recorded on the wallet) in MT940 format
        /// </summary>
        /// <remarks>
        /// The MT940 is a standard SWIFT message for electronic banking statements. MT940 statements used to import balances and transactions to ERP systems. MT940 statements are delivered as text in the result field. Format bases on MT940 SWIFT specification.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DD, if provided only dateFrom, given date automatically will be used for dateTo and operations recorded in this date are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <returns>Returns string in mt940 format statement with operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoryMt940Response> Mt940Async(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous2> currencies);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet history (operations recorded on the wallet) in MT940 format
        /// </summary>
        /// <remarks>
        /// The MT940 is a standard SWIFT message for electronic banking statements. MT940 statements used to import balances and transactions to ERP systems. MT940 statements are delivered as text in the result field. Format bases on MT940 SWIFT specification.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DD, if provided only dateFrom, given date automatically will be used for dateTo and operations recorded in this date are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <returns>Returns string in mt940 format statement with operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoryMt940Response> Mt940Async(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous2> currencies, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns current exchange rate
        /// </summary>
        /// <remarks>
        /// Returns current exchange rate (buy and sell) offered by Currency One for specified currency pair
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns current exchange rate (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FxRateResponse> GetFxRateAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string currencyPair);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns current exchange rate
        /// </summary>
        /// <remarks>
        /// Returns current exchange rate (buy and sell) offered by Currency One for specified currency pair
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns current exchange rate (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FxRateResponse> GetFxRateAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string currencyPair, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns 10 best bids and asks on currency pair in question
        /// </summary>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns best offers available on market (10 bids and asks), if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BestOffersResponse> GetBestOffersAsync(CurrencyPair currencyPair);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 10 best bids and asks on currency pair in question
        /// </summary>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns best offers available on market (10 bids and asks), if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BestOffersResponse> GetBestOffersAsync(CurrencyPair currencyPair, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns more detailed list of best bids and asks on currency pair in question
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <param name="itemLimit">Indicates how many uniquely priced offers are to be fetched (starting from the best).</param>
        /// <returns>Returns best offers available on market - 10 (or itemLimit) bids and asks, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BestOffersDetailedResponse> GetBestOffersDetailedAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, CurrencyPair2 currencyPair, int? itemLimit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns more detailed list of best bids and asks on currency pair in question
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <param name="itemLimit">Indicates how many uniquely priced offers are to be fetched (starting from the best).</param>
        /// <returns>Returns best offers available on market - 10 (or itemLimit) bids and asks, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BestOffersDetailedResponse> GetBestOffersDetailedAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, CurrencyPair2 currencyPair, int? itemLimit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns active orders, ordered by most recently submitted.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="itemLimit">Maximum items fetched in one response. Use olderThan parameter to get older orders.</param>
        /// <param name="olderThan">`submitTs` of the last order from previous response. Use this to fetch next batch of active orders, if any.</param>
        /// <returns>Returns matching orders details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> FindActiveOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, int? itemLimit, System.DateTime? olderThan);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns active orders, ordered by most recently submitted.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="itemLimit">Maximum items fetched in one response. Use olderThan parameter to get older orders.</param>
        /// <param name="olderThan">`submitTs` of the last order from previous response. Use this to fetch next batch of active orders, if any.</param>
        /// <returns>Returns matching orders details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> FindActiveOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, int? itemLimit, System.DateTime? olderThan, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the list with an order specified by orderId or empty list if not found.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns matching order details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> FindOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the list with an order specified by orderId or empty list if not found.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns matching order details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrdersResponse> FindOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Submits new FX order to market
        /// </summary>
        /// <remarks>
        /// Platform allows to submit buy or sell order with price limit. Orders shall concern one of currency pairs listed on Walutomat market.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">If set to true, dry run mode is on. In this mode order is not placed on market, only request correctness and possiblity to place order is checked</param>
        /// <param name="submitId">Unique exchange identifier assigned by sender (GUID or UUID), required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN, must be a pair listed on Walutomat market</param>
        /// <param name="buySell">BUY or SELL order type</param>
        /// <param name="volume">Order volume, order limit (maximum amount of currency to be bought/sold depending on buySell attribute)</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="limitPrice">Maximum rate to buy currency at in case of BUY order, minimum rate to sell currency at in case of SELL order</param>
        /// <returns>Returns whether operation succeeded and identifier of created order or error - if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewOrderResponse> NewOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, CurrencyPair3 currencyPair, BuySell buySell, string volume, VolumeCurrency volumeCurrency, string limitPrice);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submits new FX order to market
        /// </summary>
        /// <remarks>
        /// Platform allows to submit buy or sell order with price limit. Orders shall concern one of currency pairs listed on Walutomat market.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">If set to true, dry run mode is on. In this mode order is not placed on market, only request correctness and possiblity to place order is checked</param>
        /// <param name="submitId">Unique exchange identifier assigned by sender (GUID or UUID), required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN, must be a pair listed on Walutomat market</param>
        /// <param name="buySell">BUY or SELL order type</param>
        /// <param name="volume">Order volume, order limit (maximum amount of currency to be bought/sold depending on buySell attribute)</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="limitPrice">Maximum rate to buy currency at in case of BUY order, minimum rate to sell currency at in case of SELL order</param>
        /// <returns>Returns whether operation succeeded and identifier of created order or error - if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewOrderResponse> NewOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, CurrencyPair3 currencyPair, BuySell buySell, string volume, VolumeCurrency volumeCurrency, string limitPrice, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Withdraw order from market
        /// </summary>
        /// <remarks>
        /// If given order is still active on market, it will be eventually withdrawn even though it is not fully executed. Please note that order might be partially executed before close request has arrived.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns operation result and closed order details. If success set to false, examine errors object. Successfully closed order has status CLOSED, completion is 0 when order was closed before any exchange was performed, 100 if order was fully executed before close request arrived or between 0 and 100 when order was partially executed before it was withdrew from market upon close request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResponse> CancelOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw order from market
        /// </summary>
        /// <remarks>
        /// If given order is still active on market, it will be eventually withdrawn even though it is not fully executed. Please note that order might be partially executed before close request has arrived.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns operation result and closed order details. If success set to false, examine errors object. Successfully closed order has status CLOSED, completion is 0 when order was closed before any exchange was performed, 100 if order was fully executed before close request arrived or between 0 and 100 when order was partially executed before it was withdrew from market upon close request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResponse> CancelOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Requests currency exchange
        /// </summary>
        /// <remarks>
        /// Requests currency exchange at rate provided by Currency One
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode currency exchange is not executed, only request correctness and possiblity to execute given exchange is checked instead</param>
        /// <param name="submitId">Any unique exchange identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN.</param>
        /// <param name="buySell">BUY or SELL operation</param>
        /// <param name="volume">Exchange volume, example "999.00"</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="ts">An identifier of the rate received from Exchange rates response (it is always in ISO 8601 format), example "2018-03-27T09:58:06.945Z"</param>
        /// <returns>Returns operation result, if operation succeeded details of permed currency exchange are returned, if success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExchangeResponse> NewExchangeAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, string currencyPair, BuySell2 buySell, string volume, VolumeCurrency2 volumeCurrency, System.DateTime ts);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests currency exchange
        /// </summary>
        /// <remarks>
        /// Requests currency exchange at rate provided by Currency One
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode currency exchange is not executed, only request correctness and possiblity to execute given exchange is checked instead</param>
        /// <param name="submitId">Any unique exchange identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN.</param>
        /// <param name="buySell">BUY or SELL operation</param>
        /// <param name="volume">Exchange volume, example "999.00"</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="ts">An identifier of the rate received from Exchange rates response (it is always in ISO 8601 format), example "2018-03-27T09:58:06.945Z"</param>
        /// <returns>Returns operation result, if operation succeeded details of permed currency exchange are returned, if success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExchangeResponse> NewExchangeAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, string currencyPair, BuySell2 buySell, string volume, VolumeCurrency2 volumeCurrency, System.DateTime ts, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Learn transfer status and details
        /// </summary>
        /// <remarks>
        /// Returns the transfer specified by transferId (transactionId) or ErrorType TRANSACTION_NOT_FOUND if not found.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="transferId">Transfer identifier assigned during transfer creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172" (if transfer ordered via API, could be found in the response, also visible in operations history available in the user panel and API endpoint). If both transferId and submitId are provided then only transferId is used.</param>
        /// <param name="submitId">Unique transfer identifier assigned by sender when requesting this transfer. If both transferId and submitId are provided then only transferId is used.</param>
        /// <returns>Returns matching transfer details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferResponse> GetTransferAsync(string x_API_Signature, System.DateTime x_API_Timestamp, string transferId, string submitId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Learn transfer status and details
        /// </summary>
        /// <remarks>
        /// Returns the transfer specified by transferId (transactionId) or ErrorType TRANSACTION_NOT_FOUND if not found.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="transferId">Transfer identifier assigned during transfer creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172" (if transfer ordered via API, could be found in the response, also visible in operations history available in the user panel and API endpoint). If both transferId and submitId are provided then only transferId is used.</param>
        /// <param name="submitId">Unique transfer identifier assigned by sender when requesting this transfer. If both transferId and submitId are provided then only transferId is used.</param>
        /// <returns>Returns matching transfer details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferResponse> GetTransferAsync(string x_API_Signature, System.DateTime x_API_Timestamp, string transferId, string submitId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One.
        /// </summary>
        /// <remarks>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One. Both beneficiary and debtor must have wallets in Currency One opened. Could be used in dryRun mode to learn just transfer possibility and cost instead of perforing actual money transfer.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode payout is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="volume">Transfer amount, example "999.00"</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018"</param>
        /// <param name="accountNumber">Destination account number assigned to customer that receives transfer, example "WX1234567890WX"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY"</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - Business documentation specifies fees.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferInternalAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, Currency currency, string volume, string title, string accountNumber, string recipientName, string recipientAddress, TransferCostInstruction transferCostInstruction);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One.
        /// </summary>
        /// <remarks>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One. Both beneficiary and debtor must have wallets in Currency One opened. Could be used in dryRun mode to learn just transfer possibility and cost instead of perforing actual money transfer.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode payout is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="volume">Transfer amount, example "999.00"</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018"</param>
        /// <param name="accountNumber">Destination account number assigned to customer that receives transfer, example "WX1234567890WX"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY"</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - Business documentation specifies fees.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferInternalAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, Currency currency, string volume, string title, string accountNumber, string recipientName, string recipientAddress, TransferCostInstruction transferCostInstruction, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Requests new transfer from wallet where destination account number is provided in IBAN format
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency2 currency, string title, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction2 transferCostInstruction, string additionalRemittanceInformation, TransferPurpose? transferPurpose, SourceOfIncome? sourceOfIncome);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new transfer from wallet where destination account number is provided in IBAN format
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency2 currency, string title, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction2 transferCostInstruction, string additionalRemittanceInformation, TransferPurpose? transferPurpose, SourceOfIncome? sourceOfIncome, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Requests new SEPA transfer from wallet where destination account number is provided in IBAN format.
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. This method is restricted to SEPA / SEPA INSTANT transfers only.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="title">In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="instant">Differentiates between SEPA [false] and SEPA INSTANT [true] transfer types. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanSepaAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, string title, string accountNumber, string recipientName, string recipientAddress, bool? instant, string additionalRemittanceInformation, TransferPurpose2? transferPurpose, SourceOfIncome2? sourceOfIncome);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new SEPA transfer from wallet where destination account number is provided in IBAN format.
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. This method is restricted to SEPA / SEPA INSTANT transfers only.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="title">In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="instant">Differentiates between SEPA [false] and SEPA INSTANT [true] transfer types. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanSepaAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, string title, string accountNumber, string recipientName, string recipientAddress, bool? instant, string additionalRemittanceInformation, TransferPurpose2? transferPurpose, SourceOfIncome2? sourceOfIncome, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Requests new transfer from wallet to non-IBAN destinations
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in local non-IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. Endpoint availability and the list of available countries/destinations and transfer currencies depends on business agreement.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". Note that maximum allowed length is reduced in case additionalRemittanceInformation attribute is used. In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="country">Two letter code of supported destination country. Note: check list of destination countries enabled on your account.</param>
        /// <param name="swift">SWIFT code of beneficiary bank or financial institution</param>
        /// <param name="accountNumber">Destination account number.</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY".
        /// <br/>
        /// <br/>Note: money transfers to China requires province code in the recipient address field compliant with ISO 3166-2, for example `CN-HK` for Hong Kong.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="transferPurpose">The purpose of transfer</param>
        /// <param name="sourceOfIncome">Source of funds.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferNonibanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency3 currency, string title, Country country, string swift, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction3 transferCostInstruction, TransferPurpose3 transferPurpose, SourceOfIncome3 sourceOfIncome, string additionalRemittanceInformation);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new transfer from wallet to non-IBAN destinations
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in local non-IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. Endpoint availability and the list of available countries/destinations and transfer currencies depends on business agreement.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". Note that maximum allowed length is reduced in case additionalRemittanceInformation attribute is used. In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="country">Two letter code of supported destination country. Note: check list of destination countries enabled on your account.</param>
        /// <param name="swift">SWIFT code of beneficiary bank or financial institution</param>
        /// <param name="accountNumber">Destination account number.</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY".
        /// <br/>
        /// <br/>Note: money transfers to China requires province code in the recipient address field compliant with ISO 3166-2, for example `CN-HK` for Hong Kong.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="transferPurpose">The purpose of transfer</param>
        /// <param name="sourceOfIncome">Source of funds.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NewTransferResponse> NewTransferNonibanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency3 currency, string title, Country country, string swift, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction3 transferCostInstruction, TransferPurpose3 transferPurpose, SourceOfIncome3 sourceOfIncome, string additionalRemittanceInformation, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WalutomatClient : IWalutomatClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public WalutomatClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Returns wallet balance
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <returns>Returns wallet balances (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BalanceResponse> GetBalancesAsync(string x_API_Signature, System.DateTime? x_API_Timestamp)
        {
            return GetBalancesAsync(x_API_Signature, x_API_Timestamp, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet balance
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <returns>Returns wallet balances (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BalanceResponse> GetBalancesAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account/balances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BalanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns wallet history - operations recorded on the wallet
        /// </summary>
        /// <remarks>
        /// **OperationDetails**:
        /// <br/>The table below presents keys provided in OperationDeatils depending on OperationType of an entry in the account history
        /// <br/>
        /// <br/>|  OperationType   | OperationDetailedType           | OperationDetails                                                                                                                                    |
        /// <br/>|------------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
        /// <br/>| PAYIN            | PAYIN                           | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| PAYIN            | PAYIN_P24                       | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYIN            | PAYIN_CARD                      | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_PAYPAL                    | transferTitle                                                                                                                                       |
        /// <br/>| PAYIN            | PAYIN_P24_BLIK                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_GPAY                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_NOW                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYOUT           | PAYOUT                          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_REJECT                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_RETURN                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYOUT_POST_FACTUM              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle,                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT                     | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT_RETURN              | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_REJECT       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_RETURN       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT            | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_REJECT     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_RETURN     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount, returnReasonCode, returnReasonCode |
        /// <br/>| MARKET_FX        | MARKET_FX                       | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| DIRECT_FX        | DIRECT_FX                       | amountSold, amountBought, rate, rateTs                                                                                                              |
        /// <br/>| TRANSFER         | INTERNAL                        | title, senderAccountId, receiverAccountId, receiverDetails                                                                                          |
        /// <br/>| TRANSFER         | WT_PAY                          | title, senderAccountId, receiverAccountId, receiverDetails, partnerOrderId                                                                          |
        /// <br/>| COMMISSION       | PAYIN_FEE                       | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| COMMISSION       | PAYIN_P24_FEE                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| COMMISSION       | PAYIN_CARD_FEE                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| COMMISSION       | PAYIN_PAYPAL_FEE                | transferTitle                                                                                                                                       |
        /// <br/>| COMMISSION       | PAYOUT_FEE                      | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYOUT_REJECT_FEE               | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | CASH_PAYOUT_FEE                 | no details                                                                                                                                          |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_FEE          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_REJECT_FEE   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_FEE        | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_REJECT_FEE | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | MARKET_FX_FEE                   | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| COMMISSION       | CHARGE_COMPENSATION             | title                                                                                                                                               |
        /// <br/>| COMMISSION       | MONTHLY_FEE                     | no details                                                                                                                                          |
        /// <br/>| OTHER            | CUSTOMER_PROFIT                 | title                                                                                                                                               |
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations recorded in this date and newer are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <param name="operationType">Can be used to limit results to selected operation type like payin, payout, currency exchange or commission, if not provided all operations of any kind on multicurrency wallet are returned</param>
        /// <param name="operationDetailedType">Can be used to limit results to selected operation detailed type</param>
        /// <param name="itemLimit">Maximum number of account operations fetched in one response. If actual number of operations satisfying request criteria exceeds volume number, response is trimmed to this number and next request with appropriate continueFrom parameter shall be used to read next batch of operations.</param>
        /// <param name="continueFrom">ID of the history item the query will resume from. Usually the last historyItemId received in a prevoius batch. Item with provided id will not be included in the response (exclusive).</param>
        /// <param name="sortOrder">Sort order of returned elements.</param>
        /// <returns>Returns list of operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoryResponse> GetHistoryAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime? dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous> currencies, OperationType? operationType, OperationDetailedType? operationDetailedType, int? itemLimit, int? continueFrom, SortOrder? sortOrder)
        {
            return GetHistoryAsync(x_API_Signature, x_API_Timestamp, dateFrom, dateTo, currencies, operationType, operationDetailedType, itemLimit, continueFrom, sortOrder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet history - operations recorded on the wallet
        /// </summary>
        /// <remarks>
        /// **OperationDetails**:
        /// <br/>The table below presents keys provided in OperationDeatils depending on OperationType of an entry in the account history
        /// <br/>
        /// <br/>|  OperationType   | OperationDetailedType           | OperationDetails                                                                                                                                    |
        /// <br/>|------------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
        /// <br/>| PAYIN            | PAYIN                           | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| PAYIN            | PAYIN_P24                       | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYIN            | PAYIN_CARD                      | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_PAYPAL                    | transferTitle                                                                                                                                       |
        /// <br/>| PAYIN            | PAYIN_P24_BLIK                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_GPAY                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| PAYIN            | PAYIN_P24_NOW                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| PAYOUT           | PAYOUT                          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_REJECT                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | PAYOUT_RETURN                   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYOUT_POST_FACTUM              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle,                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT                     | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | CASH_PAYOUT_RETURN              | no details                                                                                                                                          |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT              | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_REJECT       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| PAYOUT           | THIRD_PARTY_PAYOUT_RETURN       | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle, returnReasonCode, returnReasonText                                       |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT            | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_REJECT     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| PAYOUT           | PAYMENT_AGENT_PAYOUT_RETURN     | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount, returnReasonCode, returnReasonCode |
        /// <br/>| MARKET_FX        | MARKET_FX                       | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| DIRECT_FX        | DIRECT_FX                       | amountSold, amountBought, rate, rateTs                                                                                                              |
        /// <br/>| TRANSFER         | INTERNAL                        | title, senderAccountId, receiverAccountId, receiverDetails                                                                                          |
        /// <br/>| TRANSFER         | WT_PAY                          | title, senderAccountId, receiverAccountId, receiverDetails, partnerOrderId                                                                          |
        /// <br/>| COMMISSION       | PAYIN_FEE                       | transferTitle, senderName, sourceAccount, destinationAccount                                                                                        |
        /// <br/>| COMMISSION       | PAYIN_P24_FEE                   | transferTitle, paymentProviderId                                                                                                                    |
        /// <br/>| COMMISSION       | PAYIN_CARD_FEE                  | transferTitle, provider, providerOperationId, cardNumber                                                                                            |
        /// <br/>| COMMISSION       | PAYIN_PAYPAL_FEE                | transferTitle                                                                                                                                       |
        /// <br/>| COMMISSION       | PAYOUT_FEE                      | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYOUT_REJECT_FEE               | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | CASH_PAYOUT_FEE                 | no details                                                                                                                                          |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_FEE          | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | THIRD_PARTY_PAYOUT_REJECT_FEE   | destinationAccount, ownerName, ownerAdress, country, swift, transferTitle                                                                           |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_FEE        | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | PAYMENT_AGENT_PAYOUT_REJECT_FEE | destinationAccount, ownerName, ownerAddress, country, swift, transferTitle, debtorId, debtorName, debtorAccount                                     |
        /// <br/>| COMMISSION       | MARKET_FX_FEE                   | orderId, currencyPair, buySell, orderVolume, priceLimit                                                                                             |
        /// <br/>| COMMISSION       | CHARGE_COMPENSATION             | title                                                                                                                                               |
        /// <br/>| COMMISSION       | MONTHLY_FEE                     | no details                                                                                                                                          |
        /// <br/>| OTHER            | CUSTOMER_PROFIT                 | title                                                                                                                                               |
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations recorded in this date and newer are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DDThh:mm:ssTZD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <param name="operationType">Can be used to limit results to selected operation type like payin, payout, currency exchange or commission, if not provided all operations of any kind on multicurrency wallet are returned</param>
        /// <param name="operationDetailedType">Can be used to limit results to selected operation detailed type</param>
        /// <param name="itemLimit">Maximum number of account operations fetched in one response. If actual number of operations satisfying request criteria exceeds volume number, response is trimmed to this number and next request with appropriate continueFrom parameter shall be used to read next batch of operations.</param>
        /// <param name="continueFrom">ID of the history item the query will resume from. Usually the last historyItemId received in a prevoius batch. Item with provided id will not be included in the response (exclusive).</param>
        /// <param name="sortOrder">Sort order of returned elements.</param>
        /// <returns>Returns list of operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoryResponse> GetHistoryAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime? dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous> currencies, OperationType? operationType, OperationDetailedType? operationDetailedType, int? itemLimit, int? continueFrom, SortOrder? sortOrder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account/history?");
            if (dateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom") + "=").Append(System.Uri.EscapeDataString(dateFrom.Value.ToString("yyyy-MM-ddTHH:mm:ssZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateTo") + "=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("yyyy-MM-ddTHH:mm:ssZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencies != null)
            {
                foreach (var item_ in currencies) { urlBuilder_.Append(System.Uri.EscapeDataString("currencies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (operationType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operationType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operationDetailedType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operationDetailedType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operationDetailedType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (itemLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (continueFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("continueFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(continueFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortOrder != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns wallet history (operations recorded on the wallet) in MT940 format
        /// </summary>
        /// <remarks>
        /// The MT940 is a standard SWIFT message for electronic banking statements. MT940 statements used to import balances and transactions to ERP systems. MT940 statements are delivered as text in the result field. Format bases on MT940 SWIFT specification.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DD, if provided only dateFrom, given date automatically will be used for dateTo and operations recorded in this date are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <returns>Returns string in mt940 format statement with operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HistoryMt940Response> Mt940Async(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous2> currencies)
        {
            return Mt940Async(x_API_Signature, x_API_Timestamp, dateFrom, dateTo, currencies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns wallet history (operations recorded on the wallet) in MT940 format
        /// </summary>
        /// <remarks>
        /// The MT940 is a standard SWIFT message for electronic banking statements. MT940 statements used to import balances and transactions to ERP systems. MT940 statements are delivered as text in the result field. Format bases on MT940 SWIFT specification.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests.</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dateFrom">Date in format YYYY-MM-DD, if provided only dateFrom, given date automatically will be used for dateTo and operations recorded in this date are returned (inclusive)</param>
        /// <param name="dateTo">Date in format YYYY-MM-DD, if provided just operations older than this date are returned (exclusive)</param>
        /// <param name="currencies">Comma-separated list of currency codes in ISO format, if provided only operations in given currencies are returned, otherwise operations in all currencies are returned</param>
        /// <returns>Returns string in mt940 format statement with operations on Walutomat multicurrency account according to selected filters. When no filters seelcted all operations up to the default volume of 200 are taken into account.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HistoryMt940Response> Mt940Async(string x_API_Signature, System.DateTime? x_API_Timestamp, System.DateTime dateFrom, System.DateTime? dateTo, System.Collections.Generic.IEnumerable<Anonymous2> currencies, System.Threading.CancellationToken cancellationToken)
        {
            if (dateFrom == null)
                throw new System.ArgumentNullException("dateFrom");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("account/history/mt940?");
            urlBuilder_.Append(System.Uri.EscapeDataString("dateFrom") + "=").Append(System.Uri.EscapeDataString(dateFrom.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (dateTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateTo") + "=").Append(System.Uri.EscapeDataString(dateTo.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencies != null)
            {
                foreach (var item_ in currencies) { urlBuilder_.Append(System.Uri.EscapeDataString("currencies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoryMt940Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns current exchange rate
        /// </summary>
        /// <remarks>
        /// Returns current exchange rate (buy and sell) offered by Currency One for specified currency pair
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns current exchange rate (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FxRateResponse> GetFxRateAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string currencyPair)
        {
            return GetFxRateAsync(x_API_Signature, x_API_Timestamp, currencyPair, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns current exchange rate
        /// </summary>
        /// <remarks>
        /// Returns current exchange rate (buy and sell) offered by Currency One for specified currency pair
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns current exchange rate (if success set to false, examine errors object)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FxRateResponse> GetFxRateAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string currencyPair, System.Threading.CancellationToken cancellationToken)
        {
            if (currencyPair == null)
                throw new System.ArgumentNullException("currencyPair");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("direct_fx/rates?");
            urlBuilder_.Append(System.Uri.EscapeDataString("currencyPair") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FxRateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns 10 best bids and asks on currency pair in question
        /// </summary>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns best offers available on market (10 bids and asks), if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BestOffersResponse> GetBestOffersAsync(CurrencyPair currencyPair)
        {
            return GetBestOffersAsync(currencyPair, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 10 best bids and asks on currency pair in question
        /// </summary>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <returns>Returns best offers available on market (10 bids and asks), if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BestOffersResponse> GetBestOffersAsync(CurrencyPair currencyPair, System.Threading.CancellationToken cancellationToken)
        {
            if (currencyPair == null)
                throw new System.ArgumentNullException("currencyPair");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/best_offers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("currencyPair") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BestOffersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns more detailed list of best bids and asks on currency pair in question
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <param name="itemLimit">Indicates how many uniquely priced offers are to be fetched (starting from the best).</param>
        /// <returns>Returns best offers available on market - 10 (or itemLimit) bids and asks, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BestOffersDetailedResponse> GetBestOffersDetailedAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, CurrencyPair2 currencyPair, int? itemLimit)
        {
            return GetBestOffersDetailedAsync(x_API_Signature, x_API_Timestamp, currencyPair, itemLimit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns more detailed list of best bids and asks on currency pair in question
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN</param>
        /// <param name="itemLimit">Indicates how many uniquely priced offers are to be fetched (starting from the best).</param>
        /// <returns>Returns best offers available on market - 10 (or itemLimit) bids and asks, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BestOffersDetailedResponse> GetBestOffersDetailedAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, CurrencyPair2 currencyPair, int? itemLimit, System.Threading.CancellationToken cancellationToken)
        {
            if (currencyPair == null)
                throw new System.ArgumentNullException("currencyPair");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/best_offers/detailed?");
            urlBuilder_.Append(System.Uri.EscapeDataString("currencyPair") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BestOffersDetailedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns active orders, ordered by most recently submitted.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="itemLimit">Maximum items fetched in one response. Use olderThan parameter to get older orders.</param>
        /// <param name="olderThan">`submitTs` of the last order from previous response. Use this to fetch next batch of active orders, if any.</param>
        /// <returns>Returns matching orders details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrdersResponse> FindActiveOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, int? itemLimit, System.DateTime? olderThan)
        {
            return FindActiveOrdersAsync(x_API_Signature, x_API_Timestamp, itemLimit, olderThan, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns active orders, ordered by most recently submitted.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="itemLimit">Maximum items fetched in one response. Use olderThan parameter to get older orders.</param>
        /// <param name="olderThan">`submitTs` of the last order from previous response. Use this to fetch next batch of active orders, if any.</param>
        /// <returns>Returns matching orders details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrdersResponse> FindActiveOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, int? itemLimit, System.DateTime? olderThan, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/orders/active?");
            if (itemLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (olderThan != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("olderThan") + "=").Append(System.Uri.EscapeDataString(olderThan.Value.ToString("yyyy-MM-ddTHH:mm:ssZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the list with an order specified by orderId or empty list if not found.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns matching order details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrdersResponse> FindOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId)
        {
            return FindOrdersAsync(x_API_Signature, x_API_Timestamp, orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the list with an order specified by orderId or empty list if not found.
        /// </summary>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns matching order details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrdersResponse> FindOrdersAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/orders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdersResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Submits new FX order to market
        /// </summary>
        /// <remarks>
        /// Platform allows to submit buy or sell order with price limit. Orders shall concern one of currency pairs listed on Walutomat market.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">If set to true, dry run mode is on. In this mode order is not placed on market, only request correctness and possiblity to place order is checked</param>
        /// <param name="submitId">Unique exchange identifier assigned by sender (GUID or UUID), required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN, must be a pair listed on Walutomat market</param>
        /// <param name="buySell">BUY or SELL order type</param>
        /// <param name="volume">Order volume, order limit (maximum amount of currency to be bought/sold depending on buySell attribute)</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="limitPrice">Maximum rate to buy currency at in case of BUY order, minimum rate to sell currency at in case of SELL order</param>
        /// <returns>Returns whether operation succeeded and identifier of created order or error - if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewOrderResponse> NewOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, CurrencyPair3 currencyPair, BuySell buySell, string volume, VolumeCurrency volumeCurrency, string limitPrice)
        {
            return NewOrderAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, currencyPair, buySell, volume, volumeCurrency, limitPrice, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submits new FX order to market
        /// </summary>
        /// <remarks>
        /// Platform allows to submit buy or sell order with price limit. Orders shall concern one of currency pairs listed on Walutomat market.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">If set to true, dry run mode is on. In this mode order is not placed on market, only request correctness and possiblity to place order is checked</param>
        /// <param name="submitId">Unique exchange identifier assigned by sender (GUID or UUID), required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN, must be a pair listed on Walutomat market</param>
        /// <param name="buySell">BUY or SELL order type</param>
        /// <param name="volume">Order volume, order limit (maximum amount of currency to be bought/sold depending on buySell attribute)</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="limitPrice">Maximum rate to buy currency at in case of BUY order, minimum rate to sell currency at in case of SELL order</param>
        /// <returns>Returns whether operation succeeded and identifier of created order or error - if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewOrderResponse> NewOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, CurrencyPair3 currencyPair, BuySell buySell, string volume, VolumeCurrency volumeCurrency, string limitPrice, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/orders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (currencyPair == null)
                        throw new System.ArgumentNullException("currencyPair");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("currencyPair", ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture)));
                    if (buySell == null)
                        throw new System.ArgumentNullException("buySell");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("buySell", ConvertToString(buySell, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volumeCurrency == null)
                        throw new System.ArgumentNullException("volumeCurrency");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volumeCurrency", ConvertToString(volumeCurrency, System.Globalization.CultureInfo.InvariantCulture)));
                    if (limitPrice == null)
                        throw new System.ArgumentNullException("limitPrice");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("limitPrice", ConvertToString(limitPrice, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Withdraw order from market
        /// </summary>
        /// <remarks>
        /// If given order is still active on market, it will be eventually withdrawn even though it is not fully executed. Please note that order might be partially executed before close request has arrived.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns operation result and closed order details. If success set to false, examine errors object. Successfully closed order has status CLOSED, completion is 0 when order was closed before any exchange was performed, 100 if order was fully executed before close request arrived or between 0 and 100 when order was partially executed before it was withdrew from market upon close request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrderResponse> CancelOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId)
        {
            return CancelOrderAsync(x_API_Signature, x_API_Timestamp, orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw order from market
        /// </summary>
        /// <remarks>
        /// If given order is still active on market, it will be eventually withdrawn even though it is not fully executed. Please note that order might be partially executed before close request has arrived.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="orderId">Order identifier returned during order creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172"</param>
        /// <returns>Returns operation result and closed order details. If success set to false, examine errors object. Successfully closed order has status CLOSED, completion is 0 when order was closed before any exchange was performed, 100 if order was fully executed before close request arrived or between 0 and 100 when order was partially executed before it was withdrew from market upon close request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponse> CancelOrderAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, string orderId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("market_fx/orders/close");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (orderId == null)
                        throw new System.ArgumentNullException("orderId");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("orderId", ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests currency exchange
        /// </summary>
        /// <remarks>
        /// Requests currency exchange at rate provided by Currency One
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode currency exchange is not executed, only request correctness and possiblity to execute given exchange is checked instead</param>
        /// <param name="submitId">Any unique exchange identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN.</param>
        /// <param name="buySell">BUY or SELL operation</param>
        /// <param name="volume">Exchange volume, example "999.00"</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="ts">An identifier of the rate received from Exchange rates response (it is always in ISO 8601 format), example "2018-03-27T09:58:06.945Z"</param>
        /// <returns>Returns operation result, if operation succeeded details of permed currency exchange are returned, if success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExchangeResponse> NewExchangeAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, string currencyPair, BuySell2 buySell, string volume, VolumeCurrency2 volumeCurrency, System.DateTime ts)
        {
            return NewExchangeAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, currencyPair, buySell, volume, volumeCurrency, ts, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests currency exchange
        /// </summary>
        /// <remarks>
        /// Requests currency exchange at rate provided by Currency One
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature, optional when dryRun set to true (if present in dryRun mode, its correctness will be validated), way of protecting most sensitive requests, hash from request is signed with client private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode currency exchange is not executed, only request correctness and possiblity to execute given exchange is checked instead</param>
        /// <param name="submitId">Any unique exchange identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currencyPair">Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN.</param>
        /// <param name="buySell">BUY or SELL operation</param>
        /// <param name="volume">Exchange volume, example "999.00"</param>
        /// <param name="volumeCurrency">Currency of provided volume value. ISO currency code.</param>
        /// <param name="ts">An identifier of the rate received from Exchange rates response (it is always in ISO 8601 format), example "2018-03-27T09:58:06.945Z"</param>
        /// <returns>Returns operation result, if operation succeeded details of permed currency exchange are returned, if success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExchangeResponse> NewExchangeAsync(string x_API_Signature, System.DateTime? x_API_Timestamp, bool? dryRun, string submitId, string currencyPair, BuySell2 buySell, string volume, VolumeCurrency2 volumeCurrency, System.DateTime ts, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("direct_fx/exchanges");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp != null)
                        request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp?.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (currencyPair == null)
                        throw new System.ArgumentNullException("currencyPair");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("currencyPair", ConvertToString(currencyPair, System.Globalization.CultureInfo.InvariantCulture)));
                    if (buySell == null)
                        throw new System.ArgumentNullException("buySell");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("buySell", ConvertToString(buySell, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volumeCurrency == null)
                        throw new System.ArgumentNullException("volumeCurrency");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volumeCurrency", ConvertToString(volumeCurrency, System.Globalization.CultureInfo.InvariantCulture)));
                    if (ts == null)
                        throw new System.ArgumentNullException("ts");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("ts", ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExchangeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Learn transfer status and details
        /// </summary>
        /// <remarks>
        /// Returns the transfer specified by transferId (transactionId) or ErrorType TRANSACTION_NOT_FOUND if not found.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="transferId">Transfer identifier assigned during transfer creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172" (if transfer ordered via API, could be found in the response, also visible in operations history available in the user panel and API endpoint). If both transferId and submitId are provided then only transferId is used.</param>
        /// <param name="submitId">Unique transfer identifier assigned by sender when requesting this transfer. If both transferId and submitId are provided then only transferId is used.</param>
        /// <returns>Returns matching transfer details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransferResponse> GetTransferAsync(string x_API_Signature, System.DateTime x_API_Timestamp, string transferId, string submitId)
        {
            return GetTransferAsync(x_API_Signature, x_API_Timestamp, transferId, submitId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Learn transfer status and details
        /// </summary>
        /// <remarks>
        /// Returns the transfer specified by transferId (transactionId) or ErrorType TRANSACTION_NOT_FOUND if not found.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="transferId">Transfer identifier assigned during transfer creation, example "22dba34d-d266-4084-9f3e-1b2c7c78c172" (if transfer ordered via API, could be found in the response, also visible in operations history available in the user panel and API endpoint). If both transferId and submitId are provided then only transferId is used.</param>
        /// <param name="submitId">Unique transfer identifier assigned by sender when requesting this transfer. If both transferId and submitId are provided then only transferId is used.</param>
        /// <returns>Returns matching transfer details, if success set to false, examine errors object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransferResponse> GetTransferAsync(string x_API_Signature, System.DateTime x_API_Timestamp, string transferId, string submitId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transfer?");
            if (transferId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transferId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transferId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (submitId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("submitId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp == null)
                        throw new System.ArgumentNullException("x_API_Timestamp");
                    request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One.
        /// </summary>
        /// <remarks>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One. Both beneficiary and debtor must have wallets in Currency One opened. Could be used in dryRun mode to learn just transfer possibility and cost instead of perforing actual money transfer.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode payout is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="volume">Transfer amount, example "999.00"</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018"</param>
        /// <param name="accountNumber">Destination account number assigned to customer that receives transfer, example "WX1234567890WX"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY"</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - Business documentation specifies fees.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewTransferResponse> NewTransferInternalAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, Currency currency, string volume, string title, string accountNumber, string recipientName, string recipientAddress, TransferCostInstruction transferCostInstruction)
        {
            return NewTransferInternalAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, currency, volume, title, accountNumber, recipientName, recipientAddress, transferCostInstruction, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One.
        /// </summary>
        /// <remarks>
        /// Requests new internal transfer from own wallet to another wallet operated by Currency One. Both beneficiary and debtor must have wallets in Currency One opened. Could be used in dryRun mode to learn just transfer possibility and cost instead of perforing actual money transfer.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode payout is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="volume">Transfer amount, example "999.00"</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018"</param>
        /// <param name="accountNumber">Destination account number assigned to customer that receives transfer, example "WX1234567890WX"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY"</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - Business documentation specifies fees.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewTransferResponse> NewTransferInternalAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, Currency currency, string volume, string title, string accountNumber, string recipientName, string recipientAddress, TransferCostInstruction transferCostInstruction, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transfer/internal");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp == null)
                        throw new System.ArgumentNullException("x_API_Timestamp");
                    request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("currency", ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (title != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("title", ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    if (accountNumber == null)
                        throw new System.ArgumentNullException("accountNumber");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("accountNumber", ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientName == null)
                        throw new System.ArgumentNullException("recipientName");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientName", ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientAddress != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientAddress", ConvertToString(recipientAddress, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferCostInstruction == null)
                        throw new System.ArgumentNullException("transferCostInstruction");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferCostInstruction", ConvertToString(transferCostInstruction, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests new transfer from wallet where destination account number is provided in IBAN format
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency2 currency, string title, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction2 transferCostInstruction, string additionalRemittanceInformation, TransferPurpose? transferPurpose, SourceOfIncome? sourceOfIncome)
        {
            return NewTransferIbanAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, volume, currency, title, accountNumber, recipientName, recipientAddress, faster, transferCostInstruction, additionalRemittanceInformation, transferPurpose, sourceOfIncome, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new transfer from wallet where destination account number is provided in IBAN format
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency2 currency, string title, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction2 transferCostInstruction, string additionalRemittanceInformation, TransferPurpose? transferPurpose, SourceOfIncome? sourceOfIncome, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transfer/iban");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp == null)
                        throw new System.ArgumentNullException("x_API_Timestamp");
                    request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("currency", ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)));
                    if (title != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("title", ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    if (accountNumber == null)
                        throw new System.ArgumentNullException("accountNumber");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("accountNumber", ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientName == null)
                        throw new System.ArgumentNullException("recipientName");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientName", ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientAddress != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientAddress", ConvertToString(recipientAddress, System.Globalization.CultureInfo.InvariantCulture)));
                    if (faster != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("faster", ConvertToString(faster, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferCostInstruction == null)
                        throw new System.ArgumentNullException("transferCostInstruction");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferCostInstruction", ConvertToString(transferCostInstruction, System.Globalization.CultureInfo.InvariantCulture)));
                    if (additionalRemittanceInformation != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("additionalRemittanceInformation", ConvertToString(additionalRemittanceInformation, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferPurpose != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferPurpose", ConvertToString(transferPurpose, System.Globalization.CultureInfo.InvariantCulture)));
                    if (sourceOfIncome != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("sourceOfIncome", ConvertToString(sourceOfIncome, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests new SEPA transfer from wallet where destination account number is provided in IBAN format.
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. This method is restricted to SEPA / SEPA INSTANT transfers only.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="title">In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="instant">Differentiates between SEPA [false] and SEPA INSTANT [true] transfer types. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanSepaAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, string title, string accountNumber, string recipientName, string recipientAddress, bool? instant, string additionalRemittanceInformation, TransferPurpose2? transferPurpose, SourceOfIncome2? sourceOfIncome)
        {
            return NewTransferIbanSepaAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, volume, title, accountNumber, recipientName, recipientAddress, instant, additionalRemittanceInformation, transferPurpose, sourceOfIncome, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new SEPA transfer from wallet where destination account number is provided in IBAN format.
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. This method is restricted to SEPA / SEPA INSTANT transfers only.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="title">In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="accountNumber">Destination account number in IBAN format. Country code at the beginning of IBAN number is mandatory, example "PL71967221037685356996377436"</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY". For certain transfers address is required - check business documentation.</param>
        /// <param name="instant">Differentiates between SEPA [false] and SEPA INSTANT [true] transfer types. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <param name="transferPurpose">The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <param name="sourceOfIncome">Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewTransferResponse> NewTransferIbanSepaAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, string title, string accountNumber, string recipientName, string recipientAddress, bool? instant, string additionalRemittanceInformation, TransferPurpose2? transferPurpose, SourceOfIncome2? sourceOfIncome, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transfer/iban/sepa");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp == null)
                        throw new System.ArgumentNullException("x_API_Timestamp");
                    request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("title", ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    if (accountNumber == null)
                        throw new System.ArgumentNullException("accountNumber");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("accountNumber", ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientName == null)
                        throw new System.ArgumentNullException("recipientName");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientName", ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientAddress != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientAddress", ConvertToString(recipientAddress, System.Globalization.CultureInfo.InvariantCulture)));
                    if (instant != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("instant", ConvertToString(instant, System.Globalization.CultureInfo.InvariantCulture)));
                    if (additionalRemittanceInformation != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("additionalRemittanceInformation", ConvertToString(additionalRemittanceInformation, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferPurpose != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferPurpose", ConvertToString(transferPurpose, System.Globalization.CultureInfo.InvariantCulture)));
                    if (sourceOfIncome != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("sourceOfIncome", ConvertToString(sourceOfIncome, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests new transfer from wallet to non-IBAN destinations
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in local non-IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. Endpoint availability and the list of available countries/destinations and transfer currencies depends on business agreement.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". Note that maximum allowed length is reduced in case additionalRemittanceInformation attribute is used. In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="country">Two letter code of supported destination country. Note: check list of destination countries enabled on your account.</param>
        /// <param name="swift">SWIFT code of beneficiary bank or financial institution</param>
        /// <param name="accountNumber">Destination account number.</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY".
        /// <br/>
        /// <br/>Note: money transfers to China requires province code in the recipient address field compliant with ISO 3166-2, for example `CN-HK` for Hong Kong.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="transferPurpose">The purpose of transfer</param>
        /// <param name="sourceOfIncome">Source of funds.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewTransferResponse> NewTransferNonibanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency3 currency, string title, Country country, string swift, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction3 transferCostInstruction, TransferPurpose3 transferPurpose, SourceOfIncome3 sourceOfIncome, string additionalRemittanceInformation)
        {
            return NewTransferNonibanAsync(x_API_Signature, x_API_Timestamp, dryRun, submitId, volume, currency, title, country, swift, accountNumber, recipientName, recipientAddress, faster, transferCostInstruction, transferPurpose, sourceOfIncome, additionalRemittanceInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests new transfer from wallet to non-IBAN destinations
        /// </summary>
        /// <remarks>
        /// Requests transfer from wallet where destination account number is provided in local non-IBAN format - either actual or just simulation to learn transfer possibility and cost in dry run mode. Endpoint availability and the list of available countries/destinations and transfer currencies depends on business agreement.
        /// </remarks>
        /// <param name="x_API_Signature">Individual request signature with a private key, refer to documentation how to sign requests</param>
        /// <param name="x_API_Timestamp">The UTC date/time of the request, valid for +5 and -5 minutes, used to expire the signature (X-API-Signature)</param>
        /// <param name="dryRun">When true, dry run mode is on. In this mode transfer is not sent to execution, only request correctness, cost and possiblity to execute given transfer is checked instead</param>
        /// <param name="submitId">Any unique transfer identifier assigned by sender, required when not in dry run mode, must not be used when dryRun=true, example "93a68f4d-ce40-40be-adac-3bb4d4b5e392"</param>
        /// <param name="volume">Payout amount, example "999.00"</param>
        /// <param name="currency">ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.</param>
        /// <param name="title">Transfer title, example "payment to invoice number 1/2018". Note that maximum allowed length is reduced in case additionalRemittanceInformation attribute is used. In certain cases title may be shortened by cutting end of title.</param>
        /// <param name="country">Two letter code of supported destination country. Note: check list of destination countries enabled on your account.</param>
        /// <param name="swift">SWIFT code of beneficiary bank or financial institution</param>
        /// <param name="accountNumber">Destination account number.</param>
        /// <param name="recipientName">Destination account owner, example "Adventure Works Ltd"</param>
        /// <param name="recipientAddress">Destination account owner address, example "14 Tottenham Court Road, London, England, W1T 1JY".
        /// <br/>
        /// <br/>Note: money transfers to China requires province code in the recipient address field compliant with ISO 3166-2, for example `CN-HK` for Hong Kong.</param>
        /// <param name="faster">Enables usually more expensive, but faster transfer. Availability may vary across currencies and destinations. Consult business documentation and agreement to determine availability, conditions and associated cost.</param>
        /// <param name="transferCostInstruction">- `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
        /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
        /// <br/>
        /// <br/>Notes:
        /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
        /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
        /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.</param>
        /// <param name="transferPurpose">The purpose of transfer</param>
        /// <param name="sourceOfIncome">Source of funds.</param>
        /// <param name="additionalRemittanceInformation">Extra information about requested transfer, reserved for certain API clients and cases. Please fill in only when requested and in the form you will receive in separate document. Endpoint will return error if filled in when not required or incorrectly filled.</param>
        /// <returns>Response indicates whether transfer was accepted and associated fees are provided. If success set to false, examine errors object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewTransferResponse> NewTransferNonibanAsync(string x_API_Signature, System.DateTime x_API_Timestamp, bool? dryRun, string submitId, string volume, Currency3 currency, string title, Country country, string swift, string accountNumber, string recipientName, string recipientAddress, bool? faster, TransferCostInstruction3 transferCostInstruction, TransferPurpose3 transferPurpose, SourceOfIncome3 sourceOfIncome, string additionalRemittanceInformation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transfer/noniban");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_API_Signature == null)
                        throw new System.ArgumentNullException("x_API_Signature");
                    request_.Headers.TryAddWithoutValidation("X-API-Signature", ConvertToString(x_API_Signature, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_API_Timestamp == null)
                        throw new System.ArgumentNullException("x_API_Timestamp");
                    request_.Headers.TryAddWithoutValidation("X-API-Timestamp", ConvertToString(x_API_Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ"), System.Globalization.CultureInfo.InvariantCulture));
                    var keyValues_ = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (dryRun != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("dryRun", ConvertToString(dryRun, System.Globalization.CultureInfo.InvariantCulture)));
                    if (submitId != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("submitId", ConvertToString(submitId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (volume == null)
                        throw new System.ArgumentNullException("volume");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("volume", ConvertToString(volume, System.Globalization.CultureInfo.InvariantCulture)));
                    if (currency == null)
                        throw new System.ArgumentNullException("currency");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("currency", ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture)));
                    if (title != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("title", ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    if (country == null)
                        throw new System.ArgumentNullException("country");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("country", ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture)));
                    if (swift == null)
                        throw new System.ArgumentNullException("swift");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("swift", ConvertToString(swift, System.Globalization.CultureInfo.InvariantCulture)));
                    if (accountNumber == null)
                        throw new System.ArgumentNullException("accountNumber");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("accountNumber", ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientName == null)
                        throw new System.ArgumentNullException("recipientName");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientName", ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture)));
                    if (recipientAddress == null)
                        throw new System.ArgumentNullException("recipientAddress");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("recipientAddress", ConvertToString(recipientAddress, System.Globalization.CultureInfo.InvariantCulture)));
                    if (faster != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("faster", ConvertToString(faster, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferCostInstruction == null)
                        throw new System.ArgumentNullException("transferCostInstruction");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferCostInstruction", ConvertToString(transferCostInstruction, System.Globalization.CultureInfo.InvariantCulture)));
                    if (transferPurpose == null)
                        throw new System.ArgumentNullException("transferPurpose");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("transferPurpose", ConvertToString(transferPurpose, System.Globalization.CultureInfo.InvariantCulture)));
                    if (sourceOfIncome == null)
                        throw new System.ArgumentNullException("sourceOfIncome");
                    else
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("sourceOfIncome", ConvertToString(sourceOfIncome, System.Globalization.CultureInfo.InvariantCulture)));
                    if (additionalRemittanceInformation != null)
                        keyValues_.Add(new System.Collections.Generic.KeyValuePair<string, string>("additionalRemittanceInformation", ConvertToString(additionalRemittanceInformation, System.Globalization.CultureInfo.InvariantCulture)));
                    request_.Content = new System.Net.Http.FormUrlEncodedContent(keyValues_);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenericResponse
    {
        /// <summary>
        /// True when exchange request was valid and succesfully handled, if false investigate errors table for details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorType> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorType
    {
        /// <summary>
        /// Error key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorTypeKey Key { get; set; }

        /// <summary>
        /// Descriptive error message with possible references to errorData entries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("errorData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ErrorData> ErrorData { get; set; } = new System.Collections.ObjectModel.Collection<ErrorData>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorData
    {
        /// <summary>
        /// Error data entry key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// Error data entry value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DuplicatableResponse
    {
        /// <summary>
        /// True when submitId was used before, in such a case no new operation like exchange or payout is performed. It is safe to repeat request e.g. in cases when response from first attempt was not received or processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Duplicate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarketCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NonibanTransfersCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarketPair
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EURGBP")]
        EURGBP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EURUSD")]
        EURUSD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCHF")]
        EURCHF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EURPLN")]
        EURPLN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPUSD")]
        GBPUSD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPCHF")]
        GBPCHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPPLN")]
        GBPPLN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USDCHF")]
        USDCHF = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USDPLN")]
        USDPLN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHFPLN")]
        CHFPLN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EURSEK")]
        EURSEK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EURNOK")]
        EURNOK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EURDKK")]
        EURDKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCZK")]
        EURCZK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CZKPLN")]
        CZKPLN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DKKPLN")]
        DKKPLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NOKPLN")]
        NOKPLN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEKPLN")]
        SEKPLN = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnyCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewOrderResponse : GenericResponse
    {
        /// <summary>
        /// True when submitId was used before, in such a case no new operation like exchange or payout is performed. It is safe to repeat request e.g. in cases when response from first attempt was not received or processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Duplicate { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExchangeResponse : GenericResponse
    {
        /// <summary>
        /// True when submitId was used before, in such a case no new operation like exchange or payout is performed. It is safe to repeat request e.g. in cases when response from first attempt was not received or processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Duplicate { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result2 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewTransferResponse : GenericResponse
    {
        /// <summary>
        /// True when submitId was used before, in such a case no new operation like exchange or payout is performed. It is safe to repeat request e.g. in cases when response from first attempt was not received or processed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duplicate", Required = Newtonsoft.Json.Required.Always)]
        public bool Duplicate { get; set; }

        /// <summary>
        /// Container for transfer result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result3 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result4 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderDetails Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrdersResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderDetails> Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderDetails
    {
        /// <summary>
        /// Unique order identifier assigned by market operator's system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Unique order identifier assigned by client system submitting new order. GUID or UUID highly advised
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubmitId { get; set; }

        /// <summary>
        /// Timestamp of order, as registered during order request acceptance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubmitTs { get; set; }

        /// <summary>
        /// Timestamp of last order update, such as status change or ecution progress update
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpdateTs { get; set; }

        /// <summary>
        /// Order status, ACTIVE when still active on market
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDetailsStatus Status { get; set; }

        /// <summary>
        /// Percentage of executed order amount to total order volume, 100 when fullye executed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completion", Required = Newtonsoft.Json.Required.Always)]
        public double Completion { get; set; }

        /// <summary>
        /// Currency pair - base currency and counter currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyPair", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// BUY or SELL order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buySell", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDetailsBuySell BuySell { get; set; }

        /// <summary>
        /// Order volume, order limit (maximum amount of currency to be bought/sold depending on buySell attribute)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("volumeCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketCurrency VolumeCurrency { get; set; }

        /// <summary>
        /// Maximum rate to buy currency at in case of BUY order, minimum rate to sell currency at in case of SELL order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LimitPrice { get; set; }

        /// <summary>
        /// Amount of currency sold so far within this order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("soldAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoldAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("soldCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketCurrency? SoldCurrency { get; set; }

        /// <summary>
        /// Amount of currency bought so far within this order. Commission is not deducted, amount deposited to customer wallet is boughtAmount - commissionAmount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boughtAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoughtAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("boughtCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketCurrency? BoughtCurrency { get; set; }

        /// <summary>
        /// Commission for fx order execution charged by platform operator so far
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("commissionCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketCurrency? CommissionCurrency { get; set; }

        /// <summary>
        /// Commission rate applicable to this order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommissionRate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FxRateResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result5 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BestOffersResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result6 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BidAsk
    {
        /// <summary>
        /// Price of the offer(s), 4 decimal places precision, e.g. if pair is EURPLN price 4.3518 means that 1 EUR is offered for 4.3518 PLN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        /// <summary>
        /// Volume, quantity of offered currency, e.g. if pair is EURPLN this value represents quantity of EUR offered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Volume { get; set; }

        /// <summary>
        /// Offer(s) amount, that is price * volume, e.g. if it is EURPLN this value represents offer value in PLN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueInOppositeCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValueInOppositeCurrency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BestOffersDetailedResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result7 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BidAskDetailed : BidAsk
    {
        /// <summary>
        /// Either true or not defined. True when one or more offers of this price on this currency pair has been placed by the owner of the API key used to sign the request, otherwise not defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includesOwn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludesOwn { get; set; }

        /// <summary>
        /// List of individual offers of this price on this currency pair.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quotes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Quote> Quotes { get; set; } = new System.Collections.ObjectModel.Collection<Quote>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quote
    {
        /// <summary>
        /// Time of the offer's placement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ts { get; set; }

        /// <summary>
        /// Volume, quantity of offered currency, e.g. if pair is EURPLN this value represents quantity of EUR offered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Volume { get; set; }

        /// <summary>
        /// Offer's amount, that is price * volume, e.g. if it is EURPLN this value represents offer value in PLN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueInOppositeCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ValueInOppositeCurrency { get; set; }

        /// <summary>
        /// Either true or not defined. Indicates whether the offer has been placed by the owner of the API key used to sign the request. Otherwise not defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("own", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Own { get; set; }

        /// <summary>
        /// Unique order identifier assigned by market operator's system. Exists only if the offer has been placed by the owner of the API key used to sign the request. Otherwise not defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BalanceItem> Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceItem
    {
        /// <summary>
        /// ISO currency code. Consult business documentation and agreement to determine which currencies are provided to you.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BalanceItemCurrency Currency { get; set; }

        /// <summary>
        /// Account balance (sum of available and blocked sources)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceTotal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BalanceTotal { get; set; }

        /// <summary>
        /// Balance of available sources on wallet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceAvailable", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BalanceAvailable { get; set; }

        /// <summary>
        /// Balance of blocked sources on wallet. Common reason are sources blocked to secure order execution on currency stock exchange or sources blocked for ordered and not yet executed money transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceReserved", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BalanceReserved { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryMt940Response : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryResponse : GenericResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoryItem> Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryItem
    {
        /// <summary>
        /// ID of the history item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyItemId", Required = Newtonsoft.Json.Required.Always)]
        public int HistoryItemId { get; set; }

        /// <summary>
        /// Type of operation. Walutomat API distiguishes high level type of operations: payins, payouts from wallet, currency exchanges made in one of two models, commissions and fees, other operations not fitted to any of group mentioned earlier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HistoryItemOperationType OperationType { get; set; }

        /// <summary>
        /// More specific operation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationDetailedType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HistoryItemOperationDetailedType OperationDetailedType { get; set; }

        /// <summary>
        /// Timestamp of operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ts { get; set; }

        /// <summary>
        /// ISO currency code. Consult business documentation and agreement to determine which currencies are provided to you.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HistoryItemCurrency Currency { get; set; }

        /// <summary>
        /// Amount of currency credited or debited to wallet account in given currency. In case of debit operations, negaive sign is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationAmount { get; set; }

        /// <summary>
        /// Account balance after this operation. Note that in same cases wallet accounts may have negative balance (debit)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceAfter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BalanceAfter { get; set; }

        /// <summary>
        /// Identifier of Walutomat API transaction that results in account balance change. Please note that one transaction may affect multiple wallets more than one time, so this identifier may be identical in more than one wallet history item. E.g. exchange transaction affect at least 2 wallets (buyer and seller) in 2 currencies (bought and sold)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Identifier of client request that involves given wallet balance change, assigned by client system submitting new request. Not present when given wallet balance change is not result of client request submitted by Walutomat API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitId { get; set; }

        /// <summary>
        /// Flag indicating that this entry is a correcting entry. Operations can be corrected by correcting entries that usually have opposite amounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("correctingEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CorrectingEntry { get; set; }

        [Newtonsoft.Json.JsonProperty("operationDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationDetails> OperationDetails { get; set; } = new System.Collections.ObjectModel.Collection<OperationDetails>();

        /// <summary>
        /// Combination of order channel and first five characters of used of the API key in case of API channel or panel user email address in case of GUI channel, for example: API/1a2b3... or BIZ/user@example.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderedBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    /// <summary>
    /// Can be used to limit results to selected operation type like payin, payout, currency exchange or commission, if not provided all operations of any kind on multicurrency wallet are returned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN")]
        PAYIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT")]
        PAYOUT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_FX")]
        DIRECT_FX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX")]
        MARKET_FX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
        TRANSFER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

    }

    /// <summary>
    /// Can be used to limit results to selected operation detailed type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationDetailedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN")]
        PAYIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_CARD")]
        PAYIN_CARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_CARD_FEE")]
        PAYIN_CARD_FEE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_FEE")]
        PAYIN_FEE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_PAYPAL")]
        PAYIN_PAYPAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_PAYPAL_FEE")]
        PAYIN_PAYPAL_FEE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT")]
        PAYOUT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_FEE")]
        PAYOUT_FEE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_RETURN")]
        PAYOUT_RETURN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_FEE_RETURN")]
        PAYOUT_FEE_RETURN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_POST_FACTUM")]
        PAYOUT_POST_FACTUM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT")]
        CASH_PAYOUT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT_FEE")]
        CASH_PAYOUT_FEE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT_RETURN")]
        CASH_PAYOUT_RETURN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24")]
        PAYIN_P24 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24_FEE")]
        PAYIN_P24_FEE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24_BLIK")]
        PAYIN_P24_BLIK = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24_GPAY")]
        PAYIN_P24_GPAY = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24_NOW")]
        PAYIN_P24_NOW = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX")]
        MARKET_FX = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX_FEE")]
        MARKET_FX_FEE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_FX")]
        DIRECT_FX = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGE_COMPENSATION")]
        CHARGE_COMPENSATION = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROFIT")]
        CUSTOMER_PROFIT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WT_PAY")]
        WT_PAY = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
        INTERNAL = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY_FEE")]
        MONTHLY_FEE = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 27,

    }

    /// <summary>
    /// Sort order of returned elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    /// <summary>
    /// Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyPair
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EURGBP")]
        EURGBP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EURUSD")]
        EURUSD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCHF")]
        EURCHF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EURPLN")]
        EURPLN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPUSD")]
        GBPUSD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPCHF")]
        GBPCHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPPLN")]
        GBPPLN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USDCHF")]
        USDCHF = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USDPLN")]
        USDPLN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHFPLN")]
        CHFPLN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EURSEK")]
        EURSEK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EURNOK")]
        EURNOK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EURDKK")]
        EURDKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCZK")]
        EURCZK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CZKPLN")]
        CZKPLN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DKKPLN")]
        DKKPLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NOKPLN")]
        NOKPLN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEKPLN")]
        SEKPLN = 17,

    }

    /// <summary>
    /// Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyPair2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EURGBP")]
        EURGBP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EURUSD")]
        EURUSD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCHF")]
        EURCHF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EURPLN")]
        EURPLN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPUSD")]
        GBPUSD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPCHF")]
        GBPCHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPPLN")]
        GBPPLN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USDCHF")]
        USDCHF = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USDPLN")]
        USDPLN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHFPLN")]
        CHFPLN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EURSEK")]
        EURSEK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EURNOK")]
        EURNOK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EURDKK")]
        EURDKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCZK")]
        EURCZK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CZKPLN")]
        CZKPLN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DKKPLN")]
        DKKPLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NOKPLN")]
        NOKPLN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEKPLN")]
        SEKPLN = 17,

    }

    /// <summary>
    /// Currency pair, i.e. base currency and counter currency with no separator, e.g. EURPLN, must be a pair listed on Walutomat market
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyPair3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EURGBP")]
        EURGBP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EURUSD")]
        EURUSD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCHF")]
        EURCHF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EURPLN")]
        EURPLN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPUSD")]
        GBPUSD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPCHF")]
        GBPCHF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GBPPLN")]
        GBPPLN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USDCHF")]
        USDCHF = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USDPLN")]
        USDPLN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CHFPLN")]
        CHFPLN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EURSEK")]
        EURSEK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EURNOK")]
        EURNOK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EURDKK")]
        EURDKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EURCZK")]
        EURCZK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CZKPLN")]
        CZKPLN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"DKKPLN")]
        DKKPLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NOKPLN")]
        NOKPLN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEKPLN")]
        SEKPLN = 17,

    }

    /// <summary>
    /// BUY or SELL order type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuySell
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 1,

    }

    /// <summary>
    /// Currency of provided volume value. ISO currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VolumeCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 8,

    }

    /// <summary>
    /// BUY or SELL operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BuySell2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 1,

    }

    /// <summary>
    /// Currency of provided volume value. ISO currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VolumeCurrency2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    /// <summary>
    /// ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    /// <summary>
    /// - `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
    /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
    /// <br/>
    /// <br/>Notes:
    /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
    /// <br/>  - Business documentation specifies fees.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferCostInstruction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER_VOLUME")]
        SENDER_VOLUME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVER_VOLUME")]
        RECEIVER_VOLUME = 1,

    }

    /// <summary>
    /// ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    /// <summary>
    /// - `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
    /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
    /// <br/>
    /// <br/>Notes:
    /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
    /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
    /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferCostInstruction2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER_VOLUME")]
        SENDER_VOLUME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVER_VOLUME")]
        RECEIVER_VOLUME = 1,

    }

    /// <summary>
    /// The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILLS")]
        BILLS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMODITY")]
        COMMODITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_ENTITY")]
        DONATION_ENTITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_PERSON")]
        DONATION_PERSON = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY")]
        FAMILY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PREPAYMENT")]
        PREPAYMENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE")]
        SERVICE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPERTY")]
        PROPERTY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 8,

    }

    /// <summary>
    /// Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SourceOfIncome
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SALARY")]
        SALARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHOLARSHIP")]
        SCHOLARSHIP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURANCE")]
        INSURANCE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INVESTMENTS")]
        INVESTMENTS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION")]
        DONATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_INCOME")]
        BUSINESS_INCOME = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    /// <summary>
    /// The purpose of transfer. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferPurpose2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILLS")]
        BILLS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMODITY")]
        COMMODITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_ENTITY")]
        DONATION_ENTITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_PERSON")]
        DONATION_PERSON = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY")]
        FAMILY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PREPAYMENT")]
        PREPAYMENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE")]
        SERVICE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPERTY")]
        PROPERTY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 8,

    }

    /// <summary>
    /// Source of funds. Might be required for high volume and offshore transfers, detailed usage conditions outlined in the business agreement.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SourceOfIncome2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SALARY")]
        SALARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHOLARSHIP")]
        SCHOLARSHIP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURANCE")]
        INSURANCE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INVESTMENTS")]
        INVESTMENTS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION")]
        DONATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_INCOME")]
        BUSINESS_INCOME = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    /// <summary>
    /// ISO currency code. Consult business documentation and agreeement to determine in which currencies transfers are provided to you.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

    }

    /// <summary>
    /// Two letter code of supported destination country. Note: check list of destination countries enabled on your account.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KR")]
        KR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CN")]
        CN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"JP")]
        JP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TW")]
        TW = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NG")]
        NG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GH")]
        GH = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VN")]
        VN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ET")]
        ET = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ZA")]
        ZA = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GN")]
        GN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AR")]
        AR = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BD")]
        BD = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ID")]
        ID = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MX")]
        MX = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MY")]
        MY = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PY")]
        PY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"QA")]
        QA = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TH")]
        TH = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"UY")]
        UY = 25,

    }

    /// <summary>
    /// - `RECEIVER_VOLUME` means recipient will receive exact amount provided in volume attribute.
    /// <br/>- `SENDER_VOLUME` means that volume attribute specifies sent volume (for certain transfers there are no guarantee that volume received is equal to volume sent, because extra charges may be deducted from transferred volume).
    /// <br/>
    /// <br/>Notes:
    /// <br/>  - `transferCostInstruction` may have impact on transfer fee.
    /// <br/>  - It is possible that for certain countries and currencies we are not able to send transfer with RECEIVER_VOLUME option. In such case, requests with `RECEIVER_VOLUME` option will be rejected.
    /// <br/>  - Business documentation specifies fees and possible transfer instructions for various transfer destinations.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferCostInstruction3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER_VOLUME")]
        SENDER_VOLUME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVER_VOLUME")]
        RECEIVER_VOLUME = 1,

    }

    /// <summary>
    /// The purpose of transfer
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransferPurpose3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILLS")]
        BILLS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMODITY")]
        COMMODITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_ENTITY")]
        DONATION_ENTITY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION_PERSON")]
        DONATION_PERSON = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY")]
        FAMILY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PREPAYMENT")]
        PREPAYMENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE")]
        SERVICE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPERTY")]
        PROPERTY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 8,

    }

    /// <summary>
    /// Source of funds.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SourceOfIncome3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SALARY")]
        SALARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHOLARSHIP")]
        SCHOLARSHIP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURANCE")]
        INSURANCE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INVESTMENTS")]
        INVESTMENTS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DONATION")]
        DONATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_INCOME")]
        BUSINESS_INCOME = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AMOUNT_TOO_SMALL")]
        AMOUNT_TOO_SMALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"API_DISABLED")]
        API_DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_NOT_SUPPORTED")]
        COUNTRY_NOT_SUPPORTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENCY_NOT_SUPPORTED")]
        CURRENCY_NOT_SUPPORTED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ACCOUNT_NUMBER")]
        INVALID_ACCOUNT_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_API_KEY")]
        INVALID_API_KEY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ARGUMENTS")]
        INVALID_ARGUMENTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_SIGNATURE")]
        INVALID_SIGNATURE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_API_KEY")]
        MISSING_API_KEY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_AUTH_ROLE")]
        MISSING_AUTH_ROLE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_PUBLIC_KEY")]
        MISSING_PUBLIC_KEY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MISSING_SIGNATURE")]
        MISSING_SIGNATURE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_AUTHORIZED")]
        NOT_AUTHORIZED = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_LIMIT_EXCEEDED")]
        PAYOUT_LIMIT_EXCEEDED = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_NOT_FOUND")]
        TRANSACTION_NOT_FOUND = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SOURCE_OF_INCOME_REQUIRED")]
        SOURCE_OF_INCOME_REQUIRED = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PURPOSE_REQUIRED")]
        PURPOSE_REQUIRED = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"AMOUNT_MUST_BE_INTEGER")]
        AMOUNT_MUST_BE_INTEGER = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {
        /// <summary>
        /// Identifier of the exchange order (generated by server, this is not `submitId`) or empty string when `dryRun=true`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result2
    {
        /// <summary>
        /// Identifier of the exchange (generated by server, this is not `submitId`) or empty string when `dryRun=true`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchangeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExchangeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result3
    {
        /// <summary>
        /// Identifier of the transfer (generated by server, this is not `submitId`) or empty string when `dryRun=true`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferId { get; set; }

        /// <summary>
        /// Fee/commission amount applicable to given transfer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeeAmount { get; set; }

        /// <summary>
        /// Fee/commission currency (ISO currency code)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Result3FeeCurrency FeeCurrency { get; set; }

        /// <summary>
        /// Used transfer type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Result3TransferType TransferType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result4
    {
        /// <summary>
        /// Identifier of the transfer (generated by Walutomat)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferId { get; set; }

        /// <summary>
        /// Identifier of client request that involves given wallet balance change (`submitId` of client API request when transfer were ordered via the API channel)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitId { get; set; }

        /// <summary>
        /// Timestamp of generated response, as transfer status may change in time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responseTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseTs { get; set; }

        /// <summary>
        /// Current transfer status:
        /// <br/>* REQUEST_RECEIVED - Walutomat has received client payment order and assigned uniquie transfer ID to it
        /// <br/>* SETTLED - transfer is setttled, i.e. either Walutomat has received SETTLED status directly from payment system or Walutomat has detected outgoing operation on his bank account related to the client payment order
        /// <br/>* REJECTED - Walutomat was unable to succesfully place transfer in the payment system (or in the banks systems participating in given transaction) and funds were credited back to client Walutomat wallet
        /// <br/>* RETURNED - Walutomat has received return transaction to given and credited it to client Walutomat wallet
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Result4TransferStatus TransferStatus { get; set; }

        /// <summary>
        /// Timestamp indicating when Walutomat received transfer order from client (either via API or user panel)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedTs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmittedTs { get; set; }

        /// <summary>
        /// Timestamp indicating when SETTLED status was achieved (if already achieved)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settledTs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettledTs { get; set; }

        /// <summary>
        /// Timestamp indicating when RETURNED status was achieved (if already achieved)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnedTs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnedTs { get; set; }

        /// <summary>
        /// Transfer currency ISO currency code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Result4Currency? Currency { get; set; }

        /// <summary>
        /// Transfer amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Volume { get; set; }

        /// <summary>
        /// Transfer title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferTitle { get; set; }

        /// <summary>
        /// The beneficiary (recipient) account, as entered in the transfer order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientAccount { get; set; }

        /// <summary>
        /// The beneficiary (recipient) name, as entered in the transfer order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientName { get; set; }

        /// <summary>
        /// Information why transfer has been returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnReason { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderDetailsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderDetailsBuySell
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result5
    {
        /// <summary>
        /// This is an identifier of the rate, you will reference the rate by this value, this is also timestamp of the currency quote
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ts { get; set; }

        /// <summary>
        /// Currency pair, i.e. base currency and counter currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyPair", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// This is a rate you can buy currency at, so at this rate Currency One sells
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buyRate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BuyRate { get; set; }

        /// <summary>
        /// This is a rate you can sell  scurrency at, so at this rate Currency One buys
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellRate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SellRate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result6
    {
        /// <summary>
        /// timestamp of the snapshot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ts { get; set; }

        /// <summary>
        /// Currency pair, i.e. base currency and counter currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyPair", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// List of 10 best bid offers (e.g. in EURPLN offers of buying EUR paid in PLN). List could be shorter than 10 in rare situation of fewer than 10 bids in given currency pair on Walutomat stock exchange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BidAsk> Bids { get; set; } = new System.Collections.ObjectModel.Collection<BidAsk>();

        /// <summary>
        /// List of 10 best ask offers (e.g. in EURPLN offers of selling EUR paid in PLN). List could be shorter than 10 in rare situation of fewer than 10 asks in given currency pair on Walutomat stock exchange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BidAsk> Asks { get; set; } = new System.Collections.ObjectModel.Collection<BidAsk>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result7
    {
        /// <summary>
        /// timestamp of the snapshot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ts { get; set; }

        /// <summary>
        /// Currency pair, i.e. base currency and counter currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyPair", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// List of 10 (or itemLimit) best bid offers (e.g. in EURPLN offers of buying EUR paid in PLN). List could be shorter than 10 (or itemLimit) in rare situation of Walutomat stock exchange having fewer bids in given currency pair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BidAskDetailed> Bids { get; set; } = new System.Collections.ObjectModel.Collection<BidAskDetailed>();

        /// <summary>
        /// List of 10 (or itemLimit) best ask offers (e.g. in EURPLN offers of selling EUR paid in PLN). List could be shorter than 10 (or itemLimit) in rare situation of Walutomat stock exchange having fewer asks in given currency pair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BidAskDetailed> Asks { get; set; } = new System.Collections.ObjectModel.Collection<BidAskDetailed>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BalanceItemCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HistoryItemOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN")]
        PAYIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT")]
        PAYOUT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_FX")]
        DIRECT_FX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX")]
        MARKET_FX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
        TRANSFER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HistoryItemOperationDetailedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN")]
        PAYIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_FEE")]
        PAYIN_FEE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT")]
        PAYOUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_FEE")]
        PAYOUT_FEE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_RETURN")]
        PAYOUT_RETURN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_FEE_RETURN")]
        PAYOUT_FEE_RETURN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT_POST_FACTUM")]
        PAYOUT_POST_FACTUM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT")]
        CASH_PAYOUT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT_FEE")]
        CASH_PAYOUT_FEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_PAYOUT_RETURN")]
        CASH_PAYOUT_RETURN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24")]
        PAYIN_P24 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_P24_FEE")]
        PAYIN_P24_FEE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_PAYPAL")]
        PAYIN_PAYPAL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYIN_PAYPAL_FEE")]
        PAYIN_PAYPAL_FEE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX")]
        MARKET_FX = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET_FX_FEE")]
        MARKET_FX_FEE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT_FX")]
        DIRECT_FX = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"CHARGE_COMPENSATION")]
        CHARGE_COMPENSATION = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROFIT")]
        CUSTOMER_PROFIT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"WT_PAY")]
        WT_PAY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
        INTERNAL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY_FEE")]
        MONTHLY_FEE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HistoryItemCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationDetails
    {
        /// <summary>
        /// operation detail entry key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// operation detail entry value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Result3FeeCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Result3TransferType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SEPA")]
        SEPA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPA INSTANT")]
        SEPA_INSTANT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SWIFT SHA TODAY")]
        SWIFT_SHA_TODAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWIFT SHA SPOT")]
        SWIFT_SHA_SPOT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SWIFT OUR TODAY")]
        SWIFT_OUR_TODAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC")]
        DOMESTIC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC EXPRESS")]
        DOMESTIC_EXPRESS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERNAL")]
        INTERNAL = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Result4TransferStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_RECEIVED")]
        REQUEST_RECEIVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SETTLED")]
        SETTLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Result4Currency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 22,

    }


}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604